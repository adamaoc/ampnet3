# AmpNet Media Portfolio - Cursor Rules

## Project Overview

This is a Next.js 15 portfolio website for AmpNet Media, a creative media studio. The site showcases creative works, websites built, and services offered. **This is a statically exported site** that builds to the `out` folder for deployment.

## Key Information

- **Live URL**: https://ampnet.media
- **Build Output**: Static export to `out` folder
- **Dev Server**: localhost:3232
- **Framework**: Next.js 15 with App Router (Static Export)
- **Styling**: Tailwind CSS v4
- **Language**: TypeScript with React 19
- **Deployment**: Static hosting (no server-side features available)

## Static Export Constraints

⚠️ **CRITICAL**: This is a static export site. The following are NOT available:

- Server-side API routes
- Server-side rendering at runtime
- Dynamic backend API calls during user interaction
- Server actions or server components with runtime features

## TypeScript Guidelines

- **Always use `type` instead of `interface`** unless the type is specifically designed to be extended/overwritten
- **Use `interface` only when**:
  - You need declaration merging
  - The type is designed to be extended by other modules/libraries
  - You're extending existing interfaces from third-party libraries
- **Centralize types in `src/types/`** folder with logical organization:
  - `src/types/api.ts` - API response and request types
  - `src/types/components.ts` - Component prop types
  - `src/types/data.ts` - Data structure types
  - `src/types/index.ts` - Re-export all types for easy importing
- **Type naming conventions**:
  - Use PascalCase for type names
  - Prefix component prop types with component name (e.g., `SiteCardProps`)
  - Use descriptive names that indicate purpose
- **Import types with `import type`** syntax for type-only imports
- **Export types individually** and also from index.ts for convenience

## Architecture Patterns

- Use App Router for all routing (static generation)
- Components in `src/_components/` for main page sections
- UI components in `src/components/ui/` using Radix UI patterns
- Data files in `src/data/` for static content
- Client components for interactive features
- All data must be available at build time

## Styling Guidelines

- Use Tailwind CSS exclusively
- Implement responsive-first design (mobile-first)
- Support both light and dark modes
- Use gradient designs consistently: `from-teal-600 to-orange-600` for light, `from-pink-600 to-purple-600` for dark
- Maintain glassmorphism effects with `backdrop-blur-sm` and border transparency
- Use rounded-full for buttons and cards for consistency

## Component Structure

- Keep components focused and single-responsibility
- Use TypeScript types for all props (prefer `type` over `interface`)
- Import prop types from `src/types/` folder
- Implement proper accessibility (ARIA labels, semantic HTML)
- Use Lucide React for all icons
- Follow the existing design system patterns

## Data Management

- Static data in `src/data/works.ts` for portfolio items
- All data must be available at build time
- For external data: fetch during build process, not at runtime
- Type all data structures properly using centralized types
- No dynamic API calls from client components

## File Organization

- Main page components: `src/_components/`
- Page components: `src/app/PAGE/_components/`
- App router pages: `src/app/`
- Reusable UI: `src/components/ui/`
- Type definitions: `src/types/`
- Utilities: `src/lib/`
- Types: Centralized in `src/types/` with index.ts for re-exports

## Development Guidelines

- Always use TypeScript
- Follow ESLint and Prettier configurations
- Test components in both light and dark modes
- Ensure responsive design works on all screen sizes
- Use Next.js Image component with `unoptimized: true` (required for static export)
- Use semantic HTML and proper heading hierarchy

## Performance Considerations

- Images are unoptimized due to static export - optimize manually before adding
- Implement proper loading states for client-side interactions
- Use React Suspense for async components (client-side only)
- All JavaScript runs client-side - minimize bundle size
- Optimize Tailwind CSS bundle size

## Common Patterns

- Button styling: Use gradient backgrounds with hover effects
- Cards: Use backdrop-blur and border transparency
- Typography: Use gradient text effects for headings
- Spacing: Follow consistent padding/margin patterns (pt-40, pb-20, px-6)
- Icons: Always pair with text and use consistent sizing (h-4 w-4, h-5 w-5)

## Portfolio Data Structure

- Works: Creative projects (video, advertising, social media)
- Websites: Client websites with feature configurations
- All items should have: title, category, image, description, dates
- Images stored in `public/images/projects/`
- All data must be static and available at build time

## Static Export Configuration

- `output: 'export'` in next.config.ts
- `images: { unoptimized: true }` required for static export
- `trailingSlash: true` for better static hosting compatibility
- Build generates static files in `out` folder
- No server-side features available in production
